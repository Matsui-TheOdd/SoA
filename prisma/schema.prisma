generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model sysdiagrams {
  name         String @db.VarChar(128)
  principal_id Int
  diagram_id   Int    @id @default(autoincrement())
  version      Int?
  definition   Bytes?

  @@unique([principal_id, name], map: "UK_sysdiagrams_principal_name")
}

model backupfile {
  id              String            @id @db.VarChar(50)
  ProjectID       String?           @db.VarChar(50)
  ImportDate      DateTime?         @db.DateTime(0)
  project         project?          @relation(fields: [ProjectID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_BackUpFile_Project")
  excelfilebackup excelfilebackup[]
  ifcfilebackup   ifcfilebackup[]

  @@index([ProjectID], map: "IDX_BackUpFile_ProjectID")
}

model excelfile {
  id         String    @id @db.VarChar(50)
  Name       String    @db.Text
  URL        String?   @db.Text
  ImportDate DateTime? @db.DateTime(0)
  ProjectID  String?   @db.VarChar(50)
  project    project?  @relation(fields: [ProjectID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ExcelFile_Project")
  soa        soa[]

  @@index([ProjectID], map: "IDX_ExcelFile_ProjectID")
}

model excelfilebackup {
  id           String      @id @db.VarChar(50)
  Name         String      @db.Text
  URL          String?     @db.Text
  BackUpFileID String?     @db.VarChar(50)
  backupfile   backupfile? @relation(fields: [BackUpFileID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ExcelFileBackUp_BackUpFile")
  soabackup    soabackup[]

  @@index([BackUpFileID], map: "IDX_ExcelFileBackUp_BackUpFileID")
}

model ifcfile {
  id         String    @id @db.VarChar(50)
  Name       String    @db.Text
  URL        String?   @db.Text
  ImportDate DateTime? @db.DateTime(0)
  ProjectID  String?   @db.VarChar(50)
  project    project?  @relation(fields: [ProjectID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_IFCFile_Project")

  @@index([ProjectID], map: "IDX_IFCFile_ProjectID")
}

model ifcfilebackup {
  id           String      @id @db.VarChar(50)
  Name         String      @db.Text
  URL          String?     @db.Text
  BackUpFileID String?     @db.VarChar(50)
  backupfile   backupfile? @relation(fields: [BackUpFileID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_IFCFileBackUp_BackUpFile")

  @@index([BackUpFileID], map: "IDX_IFCFileBackUp_BackUpFileID")
}

model project {
  id          String       @id @db.VarChar(50)
  Name        String       @db.Text
  Description String?      @db.Text
  CreateDate  DateTime?    @db.DateTime(0)
  ModifyDate  DateTime?    @db.DateTime(0)
  isDelete    Boolean?
  Status      String?      @db.VarChar(50)
  UserId      Int?
  backupfile  backupfile[]
  excelfile   excelfile[]
  ifcfile     ifcfile[]
  user        user?        @relation(fields: [UserId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Project_User")

  @@index([UserId], map: "IDX_Project_UserId")
}

model soa {
  id                 String     @id @db.VarChar(50)
  RefNo              String?    @db.Text
  Description        String?    @db.Text
  Rooms              String?    @db.Text
  UnitArea           String?    @db.Text
  CellularRoom       String?    @db.Text
  OpenPlan           String?    @db.Text
  SpecialRequirement String?    @db.Text
  ExcelID            String?    @db.VarChar(50)
  excelfile          excelfile? @relation(fields: [ExcelID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_SoA_ExcelFile")

  @@index([ExcelID], map: "IDX_SoA_ExcelID")
}

model soabackup {
  id                 String           @id @db.VarChar(50)
  RefNo              String?          @db.Text
  Description        String?          @db.Text
  Rooms              String?          @db.Text
  UnitArea           String?          @db.Text
  CellularRoom       String?          @db.Text
  OpenPlan           String?          @db.Text
  SpecialRequirement String?          @db.Text
  ExcelID            String?          @db.VarChar(50)
  excelfilebackup    excelfilebackup? @relation(fields: [ExcelID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_SoABackUp_ExcelFileBackUp")

  @@index([ExcelID], map: "IDX_SoABackUp_ExcelID")
}

model user {
  id      Int       @id @default(autoincrement())
  Name    String?   @db.VarChar(100)
  project project[]
}
